version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    DOCKER_REGISTRY: "${REGISTRY_URL}"
    IMAGE_NAME: "${imageName}"
    BUILDRUN_HASH: "${OCI_BUILD_RUN_ID}"
    USER_NAME: ${userName}
steps:
  - type: Command
    name: "Install Docker"
    timeoutInSeconds: 300
    command: |
      echo "Installing Docker on Oracle Linux 7..."
      yum update -y
      yum install -y yum-utils device-mapper-persistent-data lvm2
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      yum install -y docker-ce docker-ce-cli containerd.io
      service docker start
      chkconfig docker on
      echo "Docker installation completed"

  - type: Command
    name: "Build Docker Image"
    timeoutInSeconds: 1800
    command: |
      echo "Building Docker image..."
      cd voice-pipeline-agent-python
      
      # Get tenancy namespace
      echo "Using tenancy namespace: ${tenancyNamespace}"
      
      # Build images
      docker build -t ${registryUrl}.ocir.io/${tenancyNamespace}/${imageName}:latest .
      echo "=== DOCKER BUILD COMPLETED ==="
      docker images | grep ${imageName}


  - type: Command
    name: "Pre-Login Authentication Check"
    timeoutInSeconds: 60
    command: |
      set -x
      echo "=== AUTHENTICATION PRE-CHECK ==="
        
      # Check if we have the resource principal token
      if [ -z "$OCI_RESOURCE_PRINCIPAL_TOKEN" ]; then
        echo "ERROR: OCI_RESOURCE_PRINCIPAL_TOKEN is not available"
        echo "This is required for container registry authentication"
        exit 1
      fi
      
      # Test OCI CLI authentication
      echo "Testing OCI CLI authentication..."
      oci --version
      
      # Try to get tenancy info to verify authentication
      echo "Verifying resource principal authentication..."
      oci iam tenancy get --tenancy-id ${tenancyName} --auth resource_principal || true
      
      echo "=== AUTHENTICATION PRE-CHECK COMPLETED ==="
  
  - type: Command
    name: "Docker Registry Login"
    timeoutInSeconds: 120
    command: |
      set -x
      echo "=== LOGGING INTO DOCKER REGISTRY ==="
      echo "Registry URL: ${registryUrl}"
      echo "Tenancy Namespace: ${tenancyNamespace}"
      echo "Username: ${tenancyNamespace}/${userName}"
      
      # Try docker login with better error handling
      echo "Attempting docker login..."
      
      # Use the resource principal token for authentication
      echo "$OCI_RESOURCE_PRINCIPAL_TOKEN" | docker login \
        --username "${tenancyNamespace}/${userName}" \
        --password-stdin \
        "${registryUrl}" 2>&1 | tee login.log
      
      LOGIN_EXIT_CODE=${PIPESTATUS[0]}
      echo "Docker login exit code: $LOGIN_EXIT_CODE"
      
      if [ $LOGIN_EXIT_CODE -ne 0 ]; then
        echo "=== DOCKER LOGIN FAILED ==="
        echo "Login attempt log:"
        cat login.log
        echo "=== TROUBLESHOOTING INFO ==="
        echo "Registry URL: ${registryUrl}"
        echo "Full username: ${tenancyNamespace}/${userName}"
        echo "Tenancy namespace: ${tenancyNamespace}"
        echo "Username: ${userName}"
        
        # Try alternative authentication method
        echo "Trying alternative authentication..."
        docker login -u "${tenancyNamespace}/${userName}" -p "$OCI_RESOURCE_PRINCIPAL_TOKEN" "${registryUrl}" 2>&1 | tee alt_login.log
        ALT_LOGIN_EXIT_CODE=${PIPESTATUS[0]}
        
        if [ $ALT_LOGIN_EXIT_CODE -ne 0 ]; then
          echo "Alternative login also failed"
          cat alt_login.log
          exit $LOGIN_EXIT_CODE
        else
          echo "Alternative login succeeded"
        fi
      else
        echo "=== DOCKER LOGIN SUCCESSFUL ==="
      fi

  - type: Command
    name: "Docker Push"
    timeoutInSeconds: 1800
    command: |
      set -x
      echo "=== PUSHING TO DOCKER REGISTRY ==="
      docker push ${registryUrl}/${tenancyNamespace}/${imageName}:latest
      echo "=== DOCKER PUSH COMPLETED ==="

outputArtifacts:
  - name: livekit_agent_image
    type: DOCKER_IMAGE
    location: ${registryUrl}.ocir.io/${tenancyNamespace}/${imageName}:latest
